{"name":"Groundhog","tagline":"A framework for crawling GitHub projects and raw data and to extract metrics from them","body":"# Groundhog\r\n[![Build Status](https://travis-ci.org/spgroup/groundhog.png?branch=master)](https://travis-ci.org/spgroup/groundhog)\r\n\r\nGroundhog is an easy to use framework for crawling raw GitHub data and to extract metrics from it. It leverages the power of the Java language, as well as the Github plataform, to help researchers to better understand software repositories. Groundhog goals are flexibility, extensibility and simplicity.\r\n\r\n**WARNING:** Groundhog is currently alpha-software and its API **will** suffer major changes. The current version is an experiment that showcases using the GitHub API and the JavaCompiler.\r\n\r\nOn the developer side, Groundhog focuses on simplicity by shipping with a bare stack, allowing a research to get started quickly while making it easy to extend the application as and when they see fit.\r\n\r\nIt is currently alpha software and it supports:\r\n\r\n* Partially integrated with GitHub API\r\n* Extract and download projects from three forges\r\n* Collect metrics about Java code\r\n* Plug-and-play features\r\n\r\nBefore becoming beta, we want to add the following to Groundhog:\r\n* Fully-integrated with GitHub API\r\n\r\n## Build\r\n\r\nGroundhog uses Java 7 features, so you must have it installed before build. Groundhog also uses [Maven](maven.apache.org), so to build the project you will need to download and install the tool.\r\n\r\n#### Bulding for Eclipse\r\n\r\nIn order for it to behave like an Eclipse project, you'll need to run the following command in the command line:\r\n\r\n```\r\n$ mvn eclipse:eclipse\r\n```\r\n\r\nIf you prefer, you can just use the groundhog.jar file from command line. You can generate this file in two ways:\r\n\r\n### Generating the JAR via Eclipse\r\n\r\nEclipse users can go to `File > Export > Runnable JAR File` and enter the `CmdMain` class for the option \"Launch Configuration\".\r\n\r\n### Generating the JAR via command line\r\n\r\nMaven users can simply type in the root directory:\r\n\r\n```\r\n$ mvn package\r\n```\r\n\r\nand the jar will be created in the target/ path.\r\n\r\n\r\n### Running tests\r\n\r\n```\r\n$ mvn test\r\n```\r\n\r\n## Usage\r\n\r\nYou can use Groundhog in two ways: as an executable JAR from the command line or as a library in your own Java project.\r\n\r\n### Using as a executable JAR\r\n\r\nSearch GitHub for projects matching \"phonegap-facebook-plugin\" and place the results (if any) in a folder called metrics:\r\n\r\n```shell\r\n$ java -jar groundhog.jar -forge github -out metrics phonegap-facebook-plugin\r\n```\r\n\r\n### Using as a third-party library\r\n\r\n#### Fetching Metadata\r\n\r\nMetadata is fetched from GitHub's API. In order to be able to fetch more objects, you need to  [obtain your GitHub API token](https://github.com/settings/applications) and use it in Groundhog.\r\n\r\n#### Project\r\n\r\nYou can use Groundhog to fetch metadata on a list of projects that attend to a criteria\r\n\r\n```java\r\n// Create a GitHub search object\r\nInjector injector = Guice.createInjector(new SearchModule());\r\nSearchGitHub searchGitHub = injector.getInstance(SearchGitHub.class);\r\n\r\n// Search for projects named \"opencv\" starting in page 1 and stoping and going until the 3rd project\r\nList<Project> projects = searchGitHub.getProjects(\"opencv\", 1, 3);\r\n```\r\n\r\nAlternatively, you can search for projects without setting the limiting point. In this case Groundhog will fetch projects until your API limit is exceeded.\r\n\r\n```java\r\nList<Project> projects = searchGitHub.getProjects(\"eclipse\", 1, SearchGitHub.INFINITY)\r\n```\r\n\r\n#### Issues\r\n\r\nIssues are objects that only make sense from a Project perspective.\r\n\r\nTo fetch the Issues of a given project using Groundhog you should first create the Project and then tell Groundhog to hit the API and get the data.\r\n\r\n```java\r\nUser user = new User(\"joyent\");         // Create the User object\r\nProject pr = new Project(user, \"node\"); // Create the Project object\r\n\r\n// Tell Groundhog to fetch all Issues of that project and assign them the the Project object:\r\nList<Issue> issues = searchGitHub.getAllProjectIssues(pr);\r\n\r\nSystem.out.println(\"Listing 'em Issues...\");\r\nfor (Issue issue: issues) {\r\n  System.out.println(issue.getTitle());\r\n}\r\n```\r\n\r\n#### Commits\r\n\r\nYou can easily fetch all commits of a project\r\n\r\n```java\r\nUser user = new User(\"gustavopinto\");\r\nProject project = new Project(user, \"groundhog-case-study\");\r\n\r\nList<Commit> commits = searchGitHub.getAllProjectCommits(project);\r\n\r\nfor (Commit com: commits) {\r\n    System.out.println(com);\r\n}\r\n```\r\n\r\n#### Milestones\r\n\r\nJust like Issues, Groundhog lets you fetch the list of Milestones of a project, too.\r\n\r\n```java\r\nList<Milestone> milestones = searchGitHub.getAllProjectMilestones(pr);\r\n```\r\n\r\n#### Languages\r\n\r\nSoftware projects are often composed of more than one programming language. Groundhog lets you fetch the list of languages of a project among its LoC (lines of code) count.\r\n\r\n```java\r\n// Returns a List of Language objects for each language of project \"pr\"\r\nList<Language> languages = searchGitHub.fetchProjectLanguages(pr);\r\n```\r\n\r\n#### Contributors\r\n\r\nYou can also get the list of people who contributed to a project on GitHub:\r\n\r\n```java\r\nUser user = new User(\"rails\");\r\nProject project = new Project(user, \"rails\"); // project github.com/rails/rails\r\n\r\nList<User> contributors = searchGitHub.getAllProjectContributors(project);\r\n```\r\n\r\n## Local Data Extraction\r\n\r\nIn addition to the metadata extraction allowed via the GitHub API, Groundhog covers local data extraction onto repositories via a Git interface\r\n\r\nYou can, for example, count the number of commits in a project that include a Java file, via a `GitCommitExtractor` object:\r\n\r\n```java\r\nGitCommitExtractor extractor = new GitCommitExtractor();\r\nFile project = new File(\"/tmp/elasticsearch\");\r\n\r\nextractor.numberOfCommitsWithExtension(project, \"java\");\r\n```\r\n\r\n## Documentation\r\n\r\nGroundhog features a [Wiki], where you can browse for more information.\r\n\r\nYou can generate the Javadoc files with the following command:\r\n\r\n```\r\n$ cd src/\r\n$ javadoc -d src/src/groundhog br.cin.ufpe.groundhog\r\n```\r\n\r\n## Core team\r\n\r\n* Fl√°vio Junior {fjsj@cin.ufpe.br}\r\n\r\n* Gustavo Pinto {ghlp@cin.ufpe.br}\r\n\r\n* Rodrigo Alves {rav2@cin.ufpe.br}\r\n\r\n* Danilo Neves Ribeiro {dnr2@cin.ufpe.br}\r\n\r\n* Fernando Castor {myfamilyname@cin.ufpe.br}\r\n\r\n* Jesus Silva {jjss@cin.ufpe.br}\r\n\r\n## Contributions\r\n\r\nWant to contribute with code, documentation or bug report? That's great, check out the [Issues] page.\r\n\r\nPreferably, your contribution should be backed by JUnit tests.\r\n\r\nStability and maintainability are important goals of the Groundhog project. Well-written, tested code and proper documentation are very welcome.\r\n\r\n## License\r\n\r\nGroundhog is released under GPL 2.\r\n\r\n[GitHub API v3]: http://developer.github.com/\r\n[Wiki]: https://github.com/spgroup/groundhog/wiki\r\n[Issues]: https://github.com/spgroup/groundhog/issues","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}